<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="GroupAdmin"
   author="Areia"
   id="de5cc8adc920f3346d9bdf67"
   language="Lua"
   purpose="Group management"
   save_state="y"
   date_written="2020-11-10 11:00:00"
   requires="5.06"
   version="1.2"
   >
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<aliases>
    <alias
     match="^autoin(?:v|vi|vit|vite)(?:\s+(?<setting>on|off))?$"
     enabled="y"
     script="set_auto"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^autoin(?:v|vi|vit|vite)\s+msg(?:\s+(?<msg>.+))?$"
     enabled="y"
     script="set_msg"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^autoin(?:v|vi|vit|vite)\s+li?st?(?:\s+(?<player>\w+))?$"
     enabled="y"
     script="invite_list"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^autoin(?:v|vi|vit|vite)\s+he?lp$"
     enabled="y"
     script="invite_help"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>

    <alias
     match="^autoin(?:v|vi|vit|vite)\s+update$"
     enabled="y"
     script="update_plugin"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>

    <alias
     match="^autoin(?:v|vi|vit|vite)\s+reload$"
     enabled="y"
     script="reload"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>



<triggers>
    <trigger
     group="Auto_Invite"
     match="^CLAN: The Crusader (?<player>\w+) returns to the fight against evil, bringing reinforcements\.$"
     enabled="n"
     script="auto_invite"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="Auto_Invite"
     match="^\(Friend\): (?<player>\w+) has entered Aardwolf\.$"
     enabled="n"
     script="auto_invite"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="Auto_Invite"
     match="^INFO: (?<player>\w+) has been reborn as a .+$"
     enabled="n"
     script="reinvite"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="Auto_Invite"
     match="^INFO: All please welcome (?<player>\w+) back from tier creation!$"
     enabled="n"
     script="reinvite"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="After_Invite"
     match="^(You invite .+ to join group: .+\.|.+ has already been invited into this group\.)$"
     enabled="n"
     script="invite_success"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="After_Invite"
     match="^You don't see a player with that name\.$"
     enabled="n"
     script="invite_fail"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     match="^You entered: group invite (?<player>\w+)$"
     enabled="y"
     script="invite_echo"
     regexp="y"
     sequence="100"
    >
    </trigger>
</triggers>



<script>
<![CDATA[
require "commas"
require "gmcphelper"
require "serialize"
require "var"
require "tprint"
dofile(GetInfo(60) .. "aardwolf_colors.lua")

char = nil
group = nil
lastTriggerInvite = {name="", time=os.clock()}
lastInviteName = nil
activeStates = {
    ["3"] = true, -- active
    ["8"] = true, -- fighting
    ["9"] = true, -- sleeping
    ["11"] = true, -- sleeping
    ["12"] = true, -- running
} -- States that allow for sending tells/gtells/invites

function OnPluginEnable()
    var.inviteMsg = var.inviteMsg or "invite"
    var.auto = var.auto or "1"
    if (var.auto == "1") then
        EnableTriggerGroup("Auto_Invite", true)
    end
    if (var.inviteList) then
        -- Have an invite table saved. Load it.
        inviteList = loadstring("return " .. var.inviteList)()
    else
        -- Initialize
        inviteList = {}
        save_invite_list()
    end
    if (IsConnected()) then
        OnPluginConnect()
    end
end -- OnPluginEnable

function OnPluginInstall()
    OnPluginEnable()
    ColourNote("silver", "black", "GroupAdmin plugin v".. GetPluginInfo(GetPluginID(), 19) .." installed. Type '", "yellow", "", "autoinvite help", "silver", "", "' for commands.")
end -- OnPluginInstall

function OnPluginConnect()
    Send_GMCP_Packet("group on")
    if (not char) then
        Send_GMCP_Packet("request char")
    end
    if (not group) then
        Send_GMCP_Packet("request group")
    end
end -- OnPluginConnect

function OnPluginBroadcast(msg, id, name, text)
    if (id == "3e7dedbe37e44942dd46d264") then -- GMCP handler
        if (text == "char.base") then
            char = gmcp("char.base")

        elseif (text == "group") then
            group = gmcp("group")
            if (group.groupname == "") then
                -- Not in group
                group = nil
            end

        elseif (text == "comm.channel") then
            local comm = gmcp("comm.channel")
            if (comm.chan == "gtell") then
                on_gtell(comm)
            elseif (comm.chan == "tell") then
                on_tell(comm)
            end

        end
    end
end -- OnPluginBroadcast

function set_auto(alias, line, wc)
    local setting = wc.setting:lower()
    if (setting == "") then
        -- No arg. Toggle.
        var.auto = var.auto == "1" and "0" or "1"
        if (var.auto == "1") then
            EnableTriggerGroup("Auto_Invite", true)
        else
            EnableTriggerGroup("Auto_Invite", false)
        end
    elseif (setting == "on") then
        var.auto = "1"
        EnableTriggerGroup("Auto_Invite", true)
    elseif (setting == "off") then
        var.auto = "0"
        EnableTriggerGroup("Auto_Invite", false)
    end
    local msg = "Members of your auto-invite list will %s be invited to the group."
    ColourNote("silver", "black", msg:format(var.auto == "1" and "now" or "no longer"))
end -- set_auto

function set_msg(alias, line, wc)
    local msg = trim(wc.msg)
    if (msg ~= "") then
        var.inviteMsg = msg
    end
    ColourNote("silver", "black", "Auto-invite message is: ", "yellow", "", var.inviteMsg)
end -- set_msg

function in_table(t, e)
    -- NOTE: Expects that t is a table of number-string pairs!
    for k, v in ipairs(t) do
        if (e:lower() == v:lower()) then
            return true
        end
    end
    return false
end -- in_table

function in_group(name)
    if (not group) then
        return false
    end
    local members = {}
    for i, member in ipairs(group.members) do
        table.insert(members, member.name)
    end
    return in_table(members, name)
end -- in_group

function in_invite_list(name)
    -- Always assume char can execute commands without having to add themselves to the list
    return char and char.name:lower() == name:lower() and true or in_table(inviteList, name)
end -- in_invite_list

function display_invite_list()
    if (not next(inviteList)) then
        ColourNote("silver", "black", "No members in your auto invite list.")
        ColourNote("silver", "black", "Type '", "yellow", "", "autoinvite <player>", "silver", "", "' to add/remove a player.")
        return
    end
    ColourNote("white", "black", "Auto-Invite List:")
    for i, member in ipairs(inviteList) do
        ColourNote("yellow", "black", member)
    end
end -- display_invite_list

function sort_invite_list()
    table.sort(inviteList)
end -- sort_invite_list

function save_invite_list()
    sort_invite_list()
    var.inviteList = serialize.save_simple(inviteList)
end -- save_invite_list

function add_invite_list(name)
    table.insert(inviteList, name)
    save_invite_list()
end -- add_invite_list

function remove_invite_list(name)
    for i, member in ipairs(inviteList) do
        if (name:lower() == member:lower()) then
            table.remove(inviteList, i)
        end
    end
    save_invite_list()
end -- remove_invite_list

function clear_invite_list()
    inviteList = {}
    save_invite_list()
end -- clear_invite_list

function invite_list(alias, line, wc)
    if (wc.player == "") then
        -- No arg. Display list.
        display_invite_list()
        return
    end
    if (wc.player:lower() == "clear") then
        clear_invite_list()
        ColourNote("silver", "black", "Auto-invite list cleared.")
        return
    end
    if (in_invite_list(wc.player)) then
        remove_invite_list(wc.player)
        ColourNote("silver", "black", "Removed ", "yellow", "", wc.player, "silver", "", " from auto-invite list.")
    else
        add_invite_list(wc.player)
        ColourNote("silver", "black", "Added ", "yellow", "", wc.player, "silver", "", " to auto-invite list.")
        auto_invite(nil, nil, wc)
    end
end -- invite_list

function is_leader()
    return char and group and char.name == group.leader
end -- is_leader

function can_auto_respond()
    return var.auto == "1" and activeStates[gmcp("char.status.state")]
end -- can_auto_respond

function auto_invite(trigger, line, wc)
    do_invite(wc.player)
end -- auto_invite

function reinvite(trigger, line, wc)
    if in_group(wc.player) then
        do_invite(wc.player, true)
    end
end -- force_auto_invite

function do_invite(name, force)
    if (can_auto_respond() and is_leader() and in_invite_list(name)
    and (not in_group(name) or force)) then
        -- make sure not to invite the same person twice in a row (e.g., player is on both ct and ft)
        local now = os.clock()
        if (lastTriggerInvite.name == name
        and now - lastTriggerInvite.time < 30) then
            return
        end -- same player as last time
        lastTriggerInvite.name = name
        lastTriggerInvite.time = now
        send_invite(name)
    end
end -- do_invite

function invite_success()
    EnableTriggerGroup("After_Invite", false)
end

function invite_fail()
    EnableTriggerGroup("After_Invite", false)
    if lastInviteName then
        send_gtell(string.format("Could not invite %s. Maybe they're invisible or offline?", lastInviteName))
        Send(string.format("tell %s I can't see you. Maybe I'm a dum dum group leader who left my dectects off. Do `visto %s` and try again.", lastInviteName, char.name))
    else
        send_gtell("Could not invite that player. Maybe they're invisible or offline?")
    end
    lastInviteName = nil
end

function invite_echo(trigger, line, wc)
    EnableTriggerGroup("After_Invite", true)
    lastInviteName = wc.player
end

function send_gtell(msg)
    local cmd = "gtell @M=@WGroupAdmin@M= @w%s$C"
    Send(cmd:format(msg))
end -- send_gtell

function extract_msg(comm)
    return strip_colours(comm.msg):match("'(.+)'$") or ""
end -- extract_msg

function send_invite(name)
    EnableTriggerGroup("After_Invite", true)
    lastInviteName = name
    Send("group invite " .. name)
end

function on_gtell(comm)
    if (can_auto_respond() and is_leader() and in_invite_list(comm.player)) then
        local msg = extract_msg(comm)
        local regexCmd = rex.new(
            "^(?<cmd>" .. var.inviteMsg .. "|leader|promo|promote|rename|cmds|commands|autoinvite)(?:\\s+(?<target>.+))?$",
            rex.flags().CASELESS
        )
        local first, last, captures = regexCmd:match(msg)
        if (captures) then -- line matched
            local cmd = captures.cmd:lower()
            -- If line matched but `targets` is empty (e.g., entered the 'commands'
            -- command), `captures.target` will be false, not an empty string.
            local target = type(captures.target) == "string" and trim(captures.target) or captures.target
            if (cmd == var.inviteMsg:lower()) then
                if (not target or target:find("%W")) then
                    return
                end -- invalid target
                if (in_group(target)) then
                    send_gtell(string.format("%s is already in the group.", target))
                else
                    send_gtell(string.format("Sending an invite to %s for %s.", target, comm.player))
                    Send(string.format("tell %s %s asked me to invite you to the group.", target, comm.player))
                    send_invite(target)
                end -- target in group
            elseif (in_table({"leader", "promote", "promo"}, cmd)) then
                if (not target or target:find("%W")) then
                    return
                end -- invalid target
                if (in_group(target)) then
                    if (target:lower() == group.leader:lower()) then
                        send_gtell(string.format("%s is already the group leader.", target))
                    else
                        send_gtell(string.format("Passing lead to %s for %s.", target, comm.player))
                        Send("group promote " .. target)
                    end -- if target already leader
                else
                    send_gtell(string.format("%s is not a member of the group.", target))
                end -- target in group
            elseif (cmd == "rename") then
                if (not target) then
                    return
                end -- invalid target
                send_gtell(string.format("Renaming the group for %s.", comm.player))
                Send("group rename " .. target)
            elseif (cmd == "autoinvite") then
                if (not target) then
                    if #inviteList == 0 then
                        send_gtell("There is no one on the autoinvite list.")
                    else
                        autoInviteString = ""
                        print("actual ", table.concat(inviteList, ", "))
                        for i, name in ipairs(inviteList) do
                            name = name:gsub("^.", string.upper)
                            autoInviteString = autoInviteString .. name
                            if i == #inviteList - 1 then
                                if i == 1 then
                                    autoInviteString = autoInviteString .. " and "
                                else
                                    autoInviteString = autoInviteString .. ", and "
                                end
                            elseif i < #inviteList then
                                autoInviteString = autoInviteString .. ", "
                            end
                        end
                        send_gtell("The invite list contains: " .. autoInviteString)
                    end
                elseif target:lower() == group.leader:lower() then
                    send_gtell("Don't try to remove the group leader from the autoinvite list.")
                elseif (in_invite_list(target)) then
                    remove_invite_list(target)
                    send_gtell("Removed " .. target .. " from auto-invite list.")
                else
                    add_invite_list(target)
                    msg = "Added " .. target .. " to auto-invite list"
                    if in_group(target) then
                        msg = msg .. "."
                    else
                        msg = msg .. " and invited them to the group."
                        Send(string.format("tell %s %s asked me to invite you to the group.", target, comm.player))
                    end
                    send_gtell(msg)
                    send_invite(target)
                end
            elseif (in_table({"cmds", "commands"}, cmd)) then
                send_gtell(string.format("@Wcommands@w: @Y%s <player>@w, @Yleader <player>@w, @Yrename <name>@w, @Yautoinvite@w, @Yautoinvite <name>@w.", var.inviteMsg))
            end -- command checks
        end -- found command
    end -- if should look for commands
end -- on_gtell

function on_tell(comm)
    if (char and char.name ~= comm.player and can_auto_respond() and not in_group(comm.player)) then
        local msg = extract_msg(comm)
        local regexCmd = rex.new(
            "^" .. var.inviteMsg .. "$", rex.flags().CASELESS
        )
        local found = regexCmd:match(msg)
        if (found) then
            if in_invite_list(comm.player) then
                if (is_leader()) then
                    send_gtell(string.format("%s has asked to join the group.", comm.player))
                    send_invite(target)
                else
                    if (group) then
                        Send(string.format("tell %s %s is our group leader at the moment. Ask them.", comm.player, group.leader))
                    else
                        Send(string.format("tell %s I'm not in a group at the moment.", comm.player))
                    end -- in group
                end -- if leader
            elseif is_leader() then
                Send(string.format("tell %s You're not on the list.", comm.player, group.leader))
            end
        end -- if command found
    end -- if should look for command
end -- on_tell

function invite_help(alias, line, wc)
ColourNote("white", "black", string.rep(" ", 30), "", "", "Auto-Invite Commands", "", "", string.rep(" ", 30))
ColourNote("silver", "black", string.rep("-", 80))
ColourNote("yellow", "black", "autoinvite [on|off]", "silver", "", ":      Toggle/turn on/off automatic actions, essentially dis-")
ColourNote("silver", "black", "                          abling the plugin.                                    ")
ColourNote("yellow", "black", "autoinvite list [player]: With no argument, shows your auto-invite list. Other- ")
ColourNote("silver", "black", "                          wise adds/removes player from the list.               ")
ColourNote("yellow", "black", "autoinvite msg [string]:  With no argument, shows your current auto-invite mes- ")
ColourNote("silver", "black", "                          sage. Otherwise changes it to the given string. This  ")
ColourNote("silver", "black", "                          is what others tell/gtell to get invites from you.    ")
ColourNote("yellow", "black", "autoinvite update", "silver", "", ": Checks for and, if found, installs plugin updates.")
ColourNote("silver", "black", "Also, you and those on your invite list can say 'commands' on gtell to see syn- ")
ColourNote("silver", "black", "tax for group commands.                                                         ")
ColourNote("silver", "black", string.rep("-", 80))
end -- invite_help

function update_plugin(alias, line, wc)
    raw = "https://raw.githubusercontent.com/AreiaAard/Group_Admin/main/Group_Admin.xml"
    async_ok, async = pcall (require, "async")
    if async_ok then
        plugin_page = async.doAsyncRemoteRequest(raw, raw_get, "HTTPS")
    else
        ColourNote("white", "blue", "Error on plugin update!")
    end
end

function raw_get(retval, page, status, headers, full_status, request_url)
    local PLUGIN_NAME = GetPluginInfo(GetPluginID(), 1)
    local PLUGIN_VERSION = GetPluginInfo(GetPluginID(), 19)
    if status == 200 then
        raw_version = tonumber(string.match(page, '%s%s+version="([0-9%.]+)"'))
    end
    if raw_version == PLUGIN_VERSION then
        ColourNote("white", "blue", PLUGIN_NAME .. " is up-to-date.")
    elseif raw_version > PLUGIN_VERSION then
        ColourNote("white", "blue", "Updating " .. PLUGIN_NAME .. " from version " .. PLUGIN_VERSION .. " to " .. raw_version .. ". Do not touch anything!")
        local file = io.open(GetPluginInfo(GetPluginID(), 6), "w")
        file:write(page)
        file:close()
    end
    raw_version = nil
    if "" == GetAlphaOption("script_prefix") then
        SetAlphaOption("script_prefix", "\\\\\\")
    end
    Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
    ColourNote("white", "blue", "Update complete!")
end -- end Update code

function reload()
    ColourNote("silver", "black", "Reloading groupadmin.")
    Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
end
]]>
</script>


</muclient>
